import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –Ω–∞ Render.com!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("–ü–æ–∫–∞ —á—Ç–æ —è —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–∞—é –Ω–∞ /start –∏ –ø–æ–≤—Ç–æ—Ä—è—é —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –≠—Ö–æ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message()
async def echo(message: types.Message):
    try:
        await message.answer(f"¬´{message.text}¬ª ‚Äî —Ç—ã —Å–∫–∞–∑–∞–ª? –ó–∞–ø–æ–º–Ω—é! üòÑ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –±—ã–ª
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            close_bot_after=True
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())
